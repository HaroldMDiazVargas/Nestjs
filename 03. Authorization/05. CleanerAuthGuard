Cleaner code of AuthGuard
    Definition:
      - Currently we need to play with "magic" string when we call the AuthGuard:
        - AuthGuard('jwt')
      - This is not what we want, because if we want to put this Guard in various 
        controllers of different Endpoints, we need to set the same "magic string"
    

    Custom Guard:
      Extend AuthGuard:
       - We extend/inheritance this guard in a new custom exportable class
      Calling parent:
       - We jsut call the "super()" on constructor, so we instantiate this AuthGuard!!
    
    Using:
      - We just need to use the class without pasisng any value!
    

-- src/auth/guard/jwt.guard.ts
import { AuthGuard } from '@nestjs/passport';

export class JwtGuard extends AuthGuard('jwt') {
  constructor() {
    super();
  }
}


-- src/auth/guard/index.ts
export * from './jwt.guard';



-- src/auth/user/user.controller.ts

import { JwtGuard } from './../auth/guard/jwt.guard';
import { Request } from 'express';
import { Controller, Get, Req, UseGuards } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';

@Controller('users')
export class UserController {
  // @UseGuards(AuthGuard('jwt'))
  @UseGuards(JwtGuard)
  @Get('me')
  getMe(@Req() req: Request) {
    return req.user;
  }
}
